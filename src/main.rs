use teloxide::Bot;
use tokio::sync::Mutex;

use teloxide::{
    payloads::SendMessageSetters,
    prelude::*,
    types::{
        InlineKeyboardButton, InlineKeyboardMarkup,
        InlineKeyboardButtonKind, Me, ParseMode::MarkdownV2
    },
};

use std::{
    error::Error,
    sync::Arc, path::Path,
};

mod functions;
use functions::{
    create_folder, 
    create_file, 
    search_files_in_directory, 
    search_string_in_filenames,
    search_string_inside_files,
    escape_markdown_special_chars,
    create_message_and_keyboard,
    contains_invalid_chars
};

const MAX_TAG_TITLE_LENGTH: usize = 64;
const MAX_NOTE_TEXT_LENGTH: usize = 4000;
const TITLE_OFFSET: usize = SEARCH_TITLE_PREFIX.as_bytes().len() + 1;
const PHRASE_OFFSET: usize = SEARCH_PHRASE_PREFIX.as_bytes().len() + 1;

const NOTES_FOLDER: &str = "–ó–∞–º–µ—Ç–∫–∏";
const SEARCH_PHRASE_PREFIX: &str = "–§—Ä–∞–∑–∞:";
const SEARCH_TITLE_PREFIX: &str = "–ó–∞–≥–æ–ª–æ–≤–æ–∫:";
const TOKEN: &str = "token";


#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    create_folder(NOTES_FOLDER);

    let bot = Bot::new(TOKEN);
    let changing = Arc::new(Mutex::new(String::new()));

    let handler = dptree::entry()
        .branch(Update::filter_message().endpoint(message_handler))
        .branch(Update::filter_callback_query().endpoint(callback_handler));

    Dispatcher::builder(bot, handler)
        .dependencies(dptree::deps![changing])
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;

    Ok(())
}

async fn message_handler(
    bot: Bot,
    msg: Message,
    _me: Me,
    changing: Arc<Mutex<String>>
) -> Result<(), Box<dyn Error + Send + Sync>> {
    if let Some(text) = msg.text() {
        match text {
            "/start" => {
                bot.send_message(msg.chat.id, &format!(
                    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, *{}*\\!üëã\n\
                    –Ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Çü§ñ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫üìù\\. –° –ø–æ–º–æ—â—å—é –º–µ–Ω—è –≤—ã –ª–µ–≥–∫–æ —Å–º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–∞–π—Ç–∏ –µ—ë\\.\n\
                    –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤—ã –º–æ–∂–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:\n\
                    `\\#—Ç–µ–≥` ‚Äî —Ç–µ–≥ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–º–æ–π\\, –≥—Ä—É–ø–ø–∏—Ä—É—é—â–µ–π –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\\,\n\
                    `–ó–∞–≥–æ–ª–æ–≤–æ–∫` ‚Äî –∫–∞–∂–¥–∞—è –∑–∞–º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Å–≤–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫\\,\n\
                    `–¢–µ–∫—Å—Ç —Å–∞–º–æ–π –∑–∞–º–µ—Ç–∫–∏` ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\\, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å\\.\n\
                    –î–∞–≤–∞–π—Ç–µ —è –ø–æ–∫–∞–∂—É –≤–∞–º –ø—Ä–∏–º–µ—Ä —Ç–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏:\n\
                    \\#–∏–≥—Ä—ã\n\
                    –ò–≥—Ä–∞ –Ω–∞ –≤–µ—á–µ—Ä\n\
                    –•–æ—á—É –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –°–∫–∞–π—Ä–∏–ºüéÆ\n\
                    –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã —Å–æ–∑–¥–∞–ª–∏ –∑–∞–º–µ—Ç–∫–∏\\, –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –∏—Öüîé\\.\n\
                    –î–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å:\n\
                    \\#—Ç–µ–≥ ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä\\, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –∏–º–µ–Ω–Ω–æ —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º\\.\n\
                    –§—Ä–∞–∑–∞: —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ ‚Äî —Ç–∞–∫ –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É\\, –∞ –Ω–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É\\.\n\
                    –ó–∞–≥–æ–ª–æ–≤–æ–∫: —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ ‚Äî —Ç–∞–∫ –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ –∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞–º\\.\n\
                    –≠—Ç–æ –≤—Å—ë\\, —á—Ç–æ –Ω—É–∂–Ω–æ –≤–∞–º –∑–Ω–∞—Ç—å\\, –∞ —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à—É –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É\\.",
                    msg.chat.first_name().unwrap())
                ).parse_mode(MarkdownV2).await.unwrap();
            },
            _ => {
                let mut note = changing.lock().await;

                if !note.is_empty() {
                    let _ = std::fs::write(&format!("{}\\{}", NOTES_FOLDER, &*note), text);
                    bot.send_message(msg.chat.id, "*–ó–∞–º–µ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞\\!*‚úçÔ∏è").parse_mode(MarkdownV2).await.unwrap();
                    note.clear();
                }

                let lines: Vec<_> = text.split('\n').map(|s| s.trim()).collect();

                match lines.len() {
                    3 => {
                        if lines[0].chars().nth(0).unwrap() != '#' || lines[0].is_empty() || lines[1].is_empty() || lines[2].is_empty() {
                            bot.send_message(msg.chat.id,
                                "*–û—à–∏–±–∫–∞\\!*‚ö†Ô∏è\n–ü–æ–∑–≤–æ–ª—å—Ç–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:\n\
                                `\\#—Ç–µ–≥` ‚Äî —Ç–µ–≥ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–º–æ–π\\, –≥—Ä—É–ø–ø–∏—Ä—É—é—â–µ–π –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\\,\n\
                                `–ó–∞–≥–æ–ª–æ–≤–æ–∫` ‚Äî –∫–∞–∂–¥–∞—è –∑–∞–º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Å–≤–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫\\,\n\
                                `–¢–µ–∫—Å—Ç —Å–∞–º–æ–π –∑–∞–º–µ—Ç–∫–∏` ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\\, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å\\."
                            ).parse_mode(MarkdownV2).await.unwrap();
                        }
                        else {
                            if lines[0].as_bytes().len() + lines[1].as_bytes().len() > MAX_TAG_TITLE_LENGTH {
                                bot.send_message(msg.chat.id,
                                    "*–û—à–∏–±–∫–∞\\!*‚ö†Ô∏è\n\
                                    –¢–µ–≥ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\\."
                                ).parse_mode(MarkdownV2).await.unwrap();
                            } else if lines[2].len() > MAX_NOTE_TEXT_LENGTH {
                                bot.send_message(msg.chat.id,
                                    "*–û—à–∏–±–∫–∞\\!*‚ö†Ô∏è\n\
                                    –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ —Å–ª–∏—à–∫–æ–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å\\."
                                ).parse_mode(MarkdownV2).await.unwrap();
                            } else {
                                let mut file_error = false;
                                if !contains_invalid_chars(lines[0]) {
                                    create_folder(&format!("{}\\{}", NOTES_FOLDER, lines[0]));
                                    if !contains_invalid_chars(lines[1]) {
                                        if !Path::new(&format!("{}\\{}\\{}.txt", NOTES_FOLDER, lines[0], lines[1])).exists() {
                                            create_file(&format!("{}\\{}\\{}.txt", NOTES_FOLDER, lines[0], lines[1]), lines[2]);
                                            bot.send_message(msg.chat.id, "*–ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\\!*‚úÖ").parse_mode(MarkdownV2).await.unwrap();
                                        } else {
                                            bot.send_message(msg.chat.id,
                                                "*–û—à–∏–±–∫–∞\\!*‚ö†Ô∏è\n\
                                                –ó–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\\."
                                            ).parse_mode(MarkdownV2).await.unwrap();
                                        }
                                    }
                                    else {
                                        file_error = true;
                                    }
                                    
                                }
                                else {
                                    file_error = true;
                                }
                                if file_error {
                                    bot.send_message(msg.chat.id,
                                        "*–û—à–∏–±–∫–∞\\!*‚ö†Ô∏è\n\
                                        –ù–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤–æ–≤ –∫–∞–∫:\n\
                                        \\, /, :, \\*, ?, \\\", \\<, \\>, \\|\\."
                                    ).parse_mode(MarkdownV2).await.unwrap();
                                }
                            }
                            
                        }
                    },
                    2 => {
                        if lines[0].chars().nth(0).unwrap() == '#' && !lines[1].is_empty() &&
                            (!lines[1].contains(SEARCH_PHRASE_PREFIX) || !lines[1].contains(&SEARCH_PHRASE_PREFIX.to_lowercase()) || 
                            !lines[1].contains(SEARCH_TITLE_PREFIX) || !lines[1].contains(&SEARCH_TITLE_PREFIX.to_lowercase())) {
                            if lines[0].chars().nth(0).unwrap() == '#' {
                                if lines[1].contains(SEARCH_TITLE_PREFIX) || lines[1].contains(&SEARCH_TITLE_PREFIX.to_lowercase()) {
                                    let search_str = &lines[1][TITLE_OFFSET..];
                                    let files = search_string_in_filenames(&search_str.trim().to_lowercase(), &format!("–ó–∞–º–µ—Ç–∫–∏\\{}", lines[0]));
                                    if !files.is_empty() {
                                        let (message, inline_keyboard) = create_message_and_keyboard(files);
                                        bot.send_message(msg.chat.id, message).reply_markup(inline_keyboard).parse_mode(MarkdownV2).await.unwrap();
                                    } else {
                                        bot.send_message(msg.chat.id,
                                            "*–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏\\.*"
                                        ).parse_mode(MarkdownV2).await.unwrap();
                                    }
                                }

                                if lines[1].contains(SEARCH_PHRASE_PREFIX) || lines[1].contains(&SEARCH_PHRASE_PREFIX.to_lowercase()) {
                                    let search_str = &lines[1][PHRASE_OFFSET..];
                                    let files = search_string_inside_files(&search_str.trim().to_lowercase(), &format!("–ó–∞–º–µ—Ç–∫–∏\\{}", lines[0]));
                                    if !files.is_empty() {
                                        let (message, inline_keyboard) = create_message_and_keyboard(files);
                                        bot.send_message(msg.chat.id, message).reply_markup(inline_keyboard).parse_mode(MarkdownV2).await.unwrap();
                                    } else {
                                        bot.send_message(msg.chat.id,
                                            "*–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏\\.*"
                                        ).parse_mode(MarkdownV2).await.unwrap();
                                    }
                                }
                            }
                        }
                        else {
                            bot.send_message(msg.chat.id,
                                "*–û—à–∏–±–∫–∞\\!*‚ö†Ô∏è\n–ü–æ–∑–≤–æ–ª—å—Ç–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫:\n\
                                \\#—Ç–µ–≥ ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä\\, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –∏–º–µ–Ω–Ω–æ —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º\\.\n\
                                –§—Ä–∞–∑–∞: —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ ‚Äî —Ç–∞–∫ –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É\\, –∞ –Ω–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É\\.\n\
                                –ó–∞–≥–æ–ª–æ–≤–æ–∫: —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ ‚Äî —Ç–∞–∫ –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ –∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞–º\\."
                            ).parse_mode(MarkdownV2).await.unwrap();
                        }
                    },
                    1 => {
                        if lines[0].chars().nth(0).unwrap() == '#' {
                            let files = search_files_in_directory("", &format!("{}\\{}", NOTES_FOLDER, lines[0]));
                            if !files.is_empty() {
                                let (message, inline_keyboard) = create_message_and_keyboard(files);
                                bot.send_message(msg.chat.id, message).reply_markup(inline_keyboard).parse_mode(MarkdownV2).await.unwrap();
                            } else {
                                bot.send_message(msg.chat.id,
                                    "*–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏\\.*"
                                ).parse_mode(MarkdownV2).await.unwrap();
                            }
                        }
                        if lines[0].contains(SEARCH_TITLE_PREFIX) {
                            let search_str = &lines[0][TITLE_OFFSET..];
                            let files = search_string_in_filenames(&search_str.trim().to_lowercase(), NOTES_FOLDER);
                            if !files.is_empty() {
                                let (message, inline_keyboard) = create_message_and_keyboard(files);
                                bot.send_message(msg.chat.id, message).reply_markup(inline_keyboard).parse_mode(MarkdownV2).await.unwrap();
                            } else {
                                bot.send_message(msg.chat.id,
                                    "*–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏\\.*"
                                ).parse_mode(MarkdownV2).await.unwrap();
                            }
                        }
                        if lines[0].contains(SEARCH_PHRASE_PREFIX) {
                            let search_str = &lines[0][PHRASE_OFFSET..];
                            let files = search_string_inside_files(&search_str.trim().to_lowercase(), NOTES_FOLDER);
                            if !files.is_empty() {
                                let (message, inline_keyboard) = create_message_and_keyboard(files);
                                bot.send_message(msg.chat.id, message).reply_markup(inline_keyboard).parse_mode(MarkdownV2).await.unwrap();
                            } else {
                                bot.send_message(msg.chat.id,
                                    "*–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏\\.*"
                                ).parse_mode(MarkdownV2).await.unwrap();
                            }
                        }
                    },
                    _ => {}
                }
            }
        }
    }

    Ok(())
}

async fn callback_handler(bot: Bot, q: CallbackQuery, changing: Arc<Mutex<String>>) -> Result<(), Box<dyn Error + Send + Sync>> {
    if let Some(text) = q.data {
        if text.contains("#") && text.contains("\\") && text.chars().nth(0).unwrap() != 'd' && text.chars().nth(0).unwrap() != 'w' {
            let data_of_notes: Vec<_> = text.split("\\").collect();

            let text_from_file = &std::fs::read_to_string(format!("{}\\{}", NOTES_FOLDER, text.clone())).unwrap_or_default();

            if !text_from_file.is_empty() {
                let message = String::from(format!("*–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞üìù:*\n*–¢–µ–≥:* {}\n*–ó–∞–≥–æ–ª–æ–≤–æ–∫:* {}\n*–¢–µ–∫—Å—Ç:*\n`{}`",
                    escape_markdown_special_chars(&data_of_notes[0]),
                    escape_markdown_special_chars(&data_of_notes[1].replace(".txt", "")),
                    escape_markdown_special_chars(text_from_file)
                ));

                let mut inline_keyboard: Vec<Vec<InlineKeyboardButton>> = vec![];
                let mut chunk = vec![];
                chunk.push(InlineKeyboardButton::new("–£–¥–∞–ª–∏—Ç—å", InlineKeyboardButtonKind::CallbackData(format!("d{}", text.clone()))));
                chunk.push(InlineKeyboardButton::new("–ò–∑–º–µ–Ω–∏—Ç—å", InlineKeyboardButtonKind::CallbackData(format!("w{}", text.clone()))));
                inline_keyboard.push(chunk);

                bot.send_message(q.message.clone().unwrap().chat.id, message)
                    .reply_markup(InlineKeyboardMarkup::new(inline_keyboard))
                    .parse_mode(MarkdownV2)
                    .await
                    .unwrap();
            }
        }
        if text.chars().nth(0).unwrap() == 'd' {
            let _ = std::fs::remove_file(format!("{}\\{}", NOTES_FOLDER, &text[1..]));
            bot.edit_message_text(q.message.clone().unwrap().chat.id, q.message.clone().unwrap().id, "*–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞\\!*‚ôªÔ∏è")
                .parse_mode(MarkdownV2)
                .await
                .unwrap();
        }
        if text.chars().nth(0).unwrap() == 'w' {
            bot.edit_message_text(q.message.clone().unwrap().chat.id, q.message.unwrap().id, "*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:*")
                .parse_mode(MarkdownV2)
                .await
                .unwrap();
            *changing.lock().await = text[1..].to_string();
        }

        bot.answer_callback_query(q.id).await?;
    }

    Ok(())
}
